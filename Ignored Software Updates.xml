<?xml version="1.0" encoding="UTF-8"?><extensionAttribute>
<displayName>Ignored Software Updates</displayName>
<description>Output of `softwareupdate --ignore` or `defaults read /Library/Preferences/com.apple.SoftwareUpdate.plist InactiveUpdate`</description>
<dataType>string</dataType>
<scriptContentsMac>#!/usr/bin/env python&#13;
&#13;
"""&#13;
Jamf Pro extension attribute to return a list of ignored softwareupdates added&#13;
by using something like `softwareupdate --ignore "Security Update 2019-001"&#13;
Useful to manage ignored software updates by scoping smart groups to specific&#13;
updates as needed.&#13;
"""&#13;
&#13;
import subprocess&#13;
&#13;
&#13;
def main():&#13;
    """Returns list of ignored software updates"""&#13;
&#13;
    result = "None"&#13;
    updates = []&#13;
&#13;
    try:&#13;
        proc = subprocess.Popen(&#13;
            ["/usr/sbin/softwareupdate", "--ignore"],&#13;
            stdout=subprocess.PIPE,&#13;
            stderr=subprocess.PIPE,&#13;
        )&#13;
        stdout, _ = proc.communicate()&#13;
    except (IOError, OSError):&#13;
        stdout = None&#13;
&#13;
    d = str(stdout.split("(", 1)[-1].rsplit(")", 1)[0])&#13;
    if d.isspace():&#13;
        result = None&#13;
    else:&#13;
        d = [x.strip() for x in d.split(",")]&#13;
        for swu in d:&#13;
            swu = swu.strip('"')&#13;
            updates.append(swu)&#13;
&#13;
    if not updates:&#13;
        updates.append("None")&#13;
&#13;
    result = "\n".join(updates)&#13;
    print("&lt;result&gt;%s&lt;/result&gt;" % result)&#13;
&#13;
&#13;
if __name__ == "__main__":&#13;
    main()</scriptContentsMac>
</extensionAttribute>
