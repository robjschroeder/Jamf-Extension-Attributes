<?xml version="1.0" encoding="UTF-8"?><extensionAttribute>
<displayName>LatestOSSupported</displayName>
<description>Lists the latest OS supported by the model of machine.</description>
<dataType>string</dataType>
<scriptContentsMac>#!/bin/bash&#13;
&#13;
###################################################################################################&#13;
# Script Name:  jamf_ea_LatestOSSupported.sh&#13;
# By:  Zack Thompson / Created:  9/26/2017&#13;
# Version:  1.10.0 / Updated:  11/12/2020 / By:  ZT&#13;
#&#13;
# Description:  A Jamf Extension Attribute to check the latest compatible version of macOS.&#13;
#&#13;
#	System Requirements can be found here:&#13;
#		Big Sur - https://support.apple.com/en-us/HT211238&#13;
#		Catalina - https://support.apple.com/en-us/HT210222&#13;
#		Mojave - https://support.apple.com/en-us/HT210190&#13;
#			* MacPro5,1's = https://support.apple.com/en-us/HT208898&#13;
#		High Sierra - https://support.apple.com/en-us/HT208969&#13;
#		Sierra - https://support.apple.com/kb/sp742&#13;
#		El Capitan - https://support.apple.com/kb/sp728&#13;
#&#13;
###################################################################################################&#13;
&#13;
##################################################&#13;
# Define Variables&#13;
&#13;
# Setting the minimum RAM and free disk space required for compatibility.&#13;
	minimumRAMMojaveOlder=2&#13;
	minimumRAMCatalinaPlus=4&#13;
	minimumFreeSpace=20 # This isn't the technical specification for pervious versions, just a suggestion&#13;
	minimumFreeSpaceBigSur=35.5 # For 10.12 or newer&#13;
# Transform GB into Bytes&#13;
	convertToGigabytes=$((1024 * 1024 * 1024))&#13;
	requiredRAMMojaveOlder=$(($minimumRAMMojaveOlder * $convertToGigabytes))&#13;
	requiredRAMCatalinaPlus=$(($minimumRAMCatalinaPlus * $convertToGigabytes))&#13;
	requiredFreeSpace=$(($minimumFreeSpace * $convertToGigabytes))&#13;
	requiredFreeSpaceBigSur=$( /usr/bin/bc &lt;&lt;&lt; "${minimumFreeSpaceBigSur} * ${convertToGigabytes}" )&#13;
# Get the OS Version&#13;
	osVersion=$( /usr/bin/sw_vers -productVersion )&#13;
	osMajorVersion=$( echo "${osVersion}" | /usr/bin/awk -F '.' '{print $1}' )&#13;
	osMinorPatchVersion=$( echo "${osVersion}" | /usr/bin/awk -F '.' '{print $2"."$3}' )&#13;
# Get the Model Type and Major Version&#13;
	modelType=$( /usr/sbin/sysctl -n hw.model | /usr/bin/sed 's/[^a-zA-Z]//g' )&#13;
	modelVersion=$( /usr/sbin/sysctl -n hw.model | /usr/bin/sed 's/[^0-9,]//g' )&#13;
	modelMajorVersion=$( echo "${modelVersion}" | /usr/bin/awk -F ',' '{print $1}' )&#13;
	modelMinorVersion=$( echo "${modelVersion}" | /usr/bin/awk -F ',' '{print $2}' )&#13;
# Get RAM Info&#13;
	systemRAM=$( /usr/sbin/sysctl -n hw.memsize )&#13;
	RAMUpgradeable=$( /usr/sbin/system_profiler SPMemoryDataType | /usr/bin/awk -F "Upgradeable Memory: " '{print $2}' | /usr/bin/xargs )&#13;
# Get free space on the boot disk&#13;
	systemFreeSpace=$( /usr/sbin/diskutil info / | /usr/bin/awk -F '[()]' '/Free Space|Available Space/ {print $2}' | /usr/bin/cut -d " " -f1 )&#13;
&#13;
##################################################&#13;
# Setup Functions&#13;
&#13;
modelCheck() {&#13;
&#13;
	if [[ $modelMajorVersion -ge $5 &amp;&amp; ( $(/usr/bin/bc &lt;&lt;&lt; "${osMajorVersion} &gt;= 11") -eq 1 || $(/usr/bin/bc &lt;&lt;&lt; "${osMinorPatchVersion} &gt;= 9") -eq 1 ) ]]; then&#13;
		echo "Big Sur"&#13;
	elif [[ $modelMajorVersion -ge $4 &amp;&amp; $(/usr/bin/bc &lt;&lt;&lt; "${osMinorPatchVersion} &gt;= 9") -eq 1 ]]; then&#13;
		echo "Catalina"&#13;
	elif [[ $modelMajorVersion -ge $4 &amp;&amp; $(/usr/bin/bc &lt;&lt;&lt; "${osMinorPatchVersion} &lt;= 8") -eq 1 ]]; then&#13;
		echo "Mojave / OS Limitation"  # (Current OS Limitation, 10.15 Catalina)&#13;
	elif [[ $modelMajorVersion -ge $3 &amp;&amp; $(/usr/bin/bc &lt;&lt;&lt; "${osMinorPatchVersion} &gt;= 8") -eq 1 ]]; then&#13;
		echo "Mojave"&#13;
	elif [[ $modelMajorVersion -ge $2 &amp;&amp; $(/usr/bin/bc &lt;&lt;&lt; "${osMinorPatchVersion} &gt;= 8") -eq 1 ]]; then&#13;
		echo "High Sierra"&#13;
	elif [[ $modelMajorVersion -ge $2 &amp;&amp; $(/usr/bin/bc &lt;&lt;&lt; "${osMinorPatchVersion} &gt;= 7.5") -eq 1 ]]; then&#13;
		echo "Sierra / OS Limitation"  # (Current OS Limitation, 10.13 Compatible)&#13;
	elif [[ $modelMajorVersion -ge $1 &amp;&amp; $(/usr/bin/bc &lt;&lt;&lt; "${osMinorPatchVersion} &gt;= 6.8") -eq 1  ]]; then&#13;
		echo "El Capitan"&#13;
	else&#13;
		echo "Current OS Not Supported"&#13;
	fi&#13;
&#13;
}&#13;
&#13;
# Apple just had to make one iMac model (14,4) support Big Sur...&#13;
iMacModelCheck() {&#13;
&#13;
	if [[ ( $modelMajorVersion -gt $5 || $modelMajorVersion -eq $5 &amp;&amp; $modelMinorVersion -ge 4 ) &amp;&amp; ( $(/usr/bin/bc &lt;&lt;&lt; "${osMajorVersion} &gt;= 11") -eq 1 || $(/usr/bin/bc &lt;&lt;&lt; "${osMinorPatchVersion} &gt;= 9") -eq 1 ) ]]; then&#13;
		echo "Big Sur"&#13;
	elif [[ $modelMajorVersion -ge $4 &amp;&amp; $(/usr/bin/bc &lt;&lt;&lt; "${osMinorPatchVersion} &gt;= 9") -eq 1 ]]; then&#13;
		echo "Catalina"&#13;
	elif [[ $modelMajorVersion -ge $4 &amp;&amp; $(/usr/bin/bc &lt;&lt;&lt; "${osMinorPatchVersion} &lt;= 8") -eq 1 ]]; then&#13;
		echo "Mojave / OS Limitation"  # (Current OS Limitation, 10.15 Catalina)&#13;
	elif [[ $modelMajorVersion -ge $3 &amp;&amp; $(/usr/bin/bc &lt;&lt;&lt; "${osMinorPatchVersion} &gt;= 8") -eq 1 ]]; then&#13;
		echo "Mojave"&#13;
	elif [[ $modelMajorVersion -ge $2 &amp;&amp; $(/usr/bin/bc &lt;&lt;&lt; "${osMinorPatchVersion} &gt;= 8") -eq 1 ]]; then&#13;
		echo "High Sierra"&#13;
	elif [[ $modelMajorVersion -ge $2 &amp;&amp; $(/usr/bin/bc &lt;&lt;&lt; "${osMinorPatchVersion} &gt;= 7.5") -eq 1 ]]; then&#13;
		echo "Sierra / OS Limitation"  # (Current OS Limitation, 10.13 Compatible)&#13;
	elif [[ $modelMajorVersion -ge $1 &amp;&amp; $(/usr/bin/bc &lt;&lt;&lt; "${osMinorPatchVersion} &gt;= 6.8") -eq 1  ]]; then&#13;
		echo "El Capitan"&#13;
	else&#13;
		echo "Current OS Not Supported"&#13;
	fi&#13;
&#13;
}&#13;
&#13;
# Because Apple had to make Mojave support for MacPro's difficult...  I have to add complexity to the original "simplistic" logic in this script.&#13;
macProModelCheck() {&#13;
&#13;
	if [[ $modelMajorVersion -ge $5 ]]; then&#13;
		# For MacPro 6,1 (2013/Trash Cans) and newer, these should be supported no matter the existing state, since they wouldn't be compatible with any OS that is old, nor have incompatible hardware.&#13;
		echo "Big Sur"&#13;
&#13;
	elif [[ $modelMajorVersion -ge $3 &amp;&amp; $(/usr/bin/bc &lt;&lt;&lt; "${osMinorPatchVersion} &gt;= 13.6") -eq 1 ]]; then&#13;
		# Supports Mojave, but required Metal Capable Graphics Cards and FileVault must be disabled.&#13;
		macProResult="Mojave"&#13;
&#13;
		# Check if the Graphics Card supports Metal&#13;
		if [[ $( /usr/sbin/system_profiler SPDisplaysDataType | /usr/bin/awk -F 'Metal: ' '{print $2}' | /usr/bin/xargs ) != *"Supported"* ]]; then&#13;
			macProResult+=" / GFX unsupported"&#13;
		fi&#13;
&#13;
		# Check if FileVault is enabled&#13;
		if [[ $( /usr/bin/fdesetup status | /usr/bin/awk -F 'FileVault is ' '{print $2}' | /usr/bin/xargs ) != "Off." ]]; then&#13;
			macProResult+=" / FV Enabled"&#13;
		fi&#13;
&#13;
		echo "${macProResult}"&#13;
&#13;
	elif [[ $modelMajorVersion -ge $3 &amp;&amp; $(/usr/bin/bc &lt;&lt;&lt; "${osMinorPatchVersion} &lt;= 13.5") -eq 1 ]]; then&#13;
&#13;
		echo "High Sierra / OS Limitation"  # Supports Mojave or newer, but requires a stepped upgrade path&#13;
&#13;
	elif [[ $modelMajorVersion -ge $2 &amp;&amp; $(/usr/bin/bc &lt;&lt;&lt; "${osMinorPatchVersion} &gt;= 7.5") -eq 1 ]]; then&#13;
		echo "Sierra / OS Limitation"  # (Current OS Limitation, 10.13 Compatible)&#13;
&#13;
	elif [[ $modelMajorVersion -ge $1 &amp;&amp; $(/usr/bin/bc &lt;&lt;&lt; "${osMinorPatchVersion} &gt;= 6.8") -eq 1  ]]; then&#13;
		echo "El Capitan"&#13;
&#13;
	fi&#13;
}&#13;
&#13;
##################################################&#13;
# Check for compatibility...&#13;
&#13;
# Each number passed to the below functions is the minimum major model version for the model type.&#13;
# The first parameter is for El Capitan, the second is for High Sierra, the third is for Mojave, the forth is for Catalina, and the fifth is for Big Sur.&#13;
case $modelType in&#13;
	"iMac" )&#13;
		# Function iMacModelCheck&#13;
		latestOSSupport=$( iMacModelCheck 7 10 13 13 14 )&#13;
	;;&#13;
	"MacBook" )&#13;
		# Function modelCheck&#13;
		latestOSSupport=$( modelCheck 5 6 8 8 8 )&#13;
	;;&#13;
	"MacBookPro" )&#13;
		# Function modelCheck&#13;
		latestOSSupport=$( modelCheck 3 6 9 9 11 )&#13;
	;;&#13;
	"MacBookAir" )&#13;
		# Function modelCheck&#13;
		latestOSSupport=$( modelCheck 2 3 5 5 6 )&#13;
	;;&#13;
	"Macmini" )&#13;
		# Function modelCheck&#13;
		latestOSSupport=$( modelCheck 3 4 6 6 7 )&#13;
	;;&#13;
	"MacPro" )&#13;
		# Function macProModelCheck&#13;
		latestOSSupport=$( macProModelCheck 3 5 5 6 6 )&#13;
	;;&#13;
	"iMacPro" )&#13;
		# Function modelCheck&#13;
		latestOSSupport=$( modelCheck 1 1 1 1 1 )&#13;
	;;&#13;
	* )&#13;
		echo "&lt;result&gt;Model No Longer Supported&lt;/result&gt;"&#13;
		exit 0&#13;
	;;&#13;
esac&#13;
&#13;
finalResult="&lt;result&gt;${latestOSSupport}"&#13;
&#13;
# RAM validation check&#13;
if [[ "${latestOSSupport}" == "Catalina" || "${latestOSSupport}" == "Big Sur" ]]; then&#13;
	# Based on model, device supports Catalina or newer&#13;
&#13;
	if [[ $systemRAM -lt $requiredRAMCatalinaPlus ]]; then&#13;
		# Based on RAM, device does not have enough to support Catalina or newer&#13;
&#13;
		if [[ "${RAMUpgradeable}" == "No" ]]; then&#13;
			# Device is not upgradable, so can never support Catalina or newer&#13;
&#13;
			if [[ $systemRAM -ge $requiredRAMMojaveOlder ]]; then&#13;
				# Device has enough RAM to support Mojave&#13;
				latestOSSupport="Mojave"&#13;
			else&#13;
				# Device does not have enough RAM to support any upgrade!?&#13;
				echo "&lt;result&gt;Not Upgradable&lt;/result&gt;"&#13;
				exit 0&#13;
			fi&#13;
&#13;
		else&#13;
			# Device does not have enough RAM to upgrade currently, but RAM capacity can be increased.&#13;
			finalResult+=" / Insufficient RAM"&#13;
		fi&#13;
&#13;
	fi&#13;
&#13;
else&#13;
	# Based on model, device supports Mojave or older&#13;
&#13;
	if [[ $systemRAM -lt $requiredRAMMojaveOlder ]]; then&#13;
		# Based on RAM, device does not have enough to upgrade&#13;
&#13;
		if [[ "${RAMUpgradeable}" == "No" ]]; then&#13;
			# Device does not have enough RAM to support any upgrade!?&#13;
			echo "&lt;result&gt;Not Upgradable&lt;/result&gt;"&#13;
			exit 0&#13;
&#13;
		else&#13;
			# Device does not have enough RAM to upgrade currently, but RAM capacity can be increased.&#13;
			finalResult+=" / Insufficient RAM"&#13;
&#13;
		fi&#13;
&#13;
	fi&#13;
&#13;
fi&#13;
&#13;
# Check if the available free space is sufficient&#13;
if [[ "${latestOSSupport}" == "Big Sur" ]]; then&#13;
&#13;
	if [[  $( /usr/bin/bc &lt;&lt;&lt; "${systemFreeSpace} &lt;= ${requiredFreeSpaceBigSur}" ) -eq 1 ]]; then&#13;
		finalResult+=" / Insufficient Storage"&#13;
&#13;
	fi&#13;
&#13;
elif [[  $( /usr/bin/bc &lt;&lt;&lt; "${systemFreeSpace} &lt;= ${requiredFreeSpace}" ) -eq 1 ]]; then&#13;
	finalResult+=" / Insufficient Storage"&#13;
&#13;
fi&#13;
&#13;
echo "${finalResult}&lt;/result&gt;"&#13;
&#13;
exit 0</scriptContentsMac>
</extensionAttribute>
